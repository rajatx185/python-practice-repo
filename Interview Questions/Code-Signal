"""
You are given an array of non-negative integers numbers. You are allowed to choose any number from this array and swap any two digits in it. If after the swap operation the number contains leading zeros, they can be omitted and not considered (eg: 010 will be considered just 10).

Your task is to check whether it is possible to apply the swap operation at most once, so that the elements of the resulting array are strictly increasing.

Example

For numbers = [1, 5, 10, 20], the output should be solution(numbers) = true.

The initial array is already strictly increasing, so no actions are required.

For numbers = [1, 3, 900, 10], the output should be solution(numbers) = true.

By choosing numbers[2] = 900 and swapping its first and third digits, the resulting number 009 is considered to be just 9. So the updated array will look like [1, 3, 9, 10], which is strictly increasing.

For numbers = [13, 31, 30], the output should be solution(numbers) = false.

The initial array elements are not increasing.
By swapping the digits of numbers[0] = 13, the array becomes [31, 31, 30] which is not strictly increasing;
By swapping the digits of numbers[1] = 31, the array becomes [13, 13, 30] which is not strictly increasing;
By swapping the digits of numbers[2] = 30, the array becomes [13, 31, 3] which is not strictly increasing;
So, it's not possible to obtain a strictly increasing array, and the answer is false.

Input/Output

[execution time limit] 4 seconds (py3)

[input] array.integer numbers

An array of non-negative integers.

Guaranteed constraints:
1 ≤ numbers.length ≤ 103,
0 ≤ numbers[i] ≤ 103.

[output] boolean

Return true if it is possible to obtain a strictly increasing array by applying the digit-swap operation at most once, and false otherwise.




An integer n is called a full square, if there exists some integer s, such that n = s * s. Examples of full squares are 0, 1, 4, 9, 16, etc.

Given an array of distinct integers numbers, your task is to find the number of pairs of indices (i, j) such that i ≤ j and the sum numbers[i] + numbers[j] is a full square.

Example

For numbers = [-1, 18, 3, 1, 5], the output should be solution(numbers) = 4.

There is one pair of indices where the corresponding elements sum up to 0:

(0, 3): numbers[0] + numbers[3] = -1 + 1 = 0.
There are two pairs of indices where the corresponding elements sum up to 4:

(0, 4): numbers[0] + numbers[4] = -1 + 5 = 4;
(2, 3): numbers[2] + numbers[3] = 3 + 1 = 4.
There is one pair of indices where the corresponding elements sum up to 36:

(1, 1): numbers[1] + numbers[1] = 18 + 18 = 36;
In total, there are 1 + 2 + 1 = 4 pairs summing up to full squares.

For numbers = [2], the output should be solution(numbers) = 1.

The only pair of indices is (0, 0) and the sum of corresponding elements is equal to numbers[0] + numbers[0] = 2 + 2 = 4, which is a full square. So the answer is 1.
For numbers = [-2, -1, 0, 1, 2], the output should be solution(numbers) = 6.

There are three pairs of indices where the corresponding elements sum up to 0: (0, 4), (1, 3), and (2, 2).
There are two pairs of indices where the corresponding elements sum up to 1: (1, 4) and (2, 3).
There is one pair of indices where the corresponding elements sum up to 4: (4, 4).
In total, there are 3 + 2 + 1 = 6 pairs summing up to full squares.
Input/Output

[execution time limit] 8 seconds (py3)

[input] array.integer numbers

An array of distinct integers.

Guaranteed constraints:
1 ≤ numbers.length ≤ 4 · 104,
-2 · 104 ≤ numbers[i] ≤ 2 · 104.

[output] integer

The number of pairs of indices (i, j) such that i ≤ j and the sum of the corresponding elements is equal to some full square.
"""

import json
import os

class SchemaTransformer:
    def __init__(self):
        self.schema_folder = "schema"
        self.input_folder = "sample_data/input_files"
    
    def build_from_json(self, json_file_path):
        json_obj = {}        

        # read the input file
        with open(json_file_path, 'r') as f:
            input_json_obj = json.load(f)
                
        # find provider and schema name
        provider_name, schema_name = os.path.basename(json_file_path).split('.')[0].split("_")[:2]

        # build the schema file path
        schema_file_path =  os.path.join(self.schema_folder, f"{schema_name}.json")
        
        # read schema file
        with open(schema_file_path, 'r') as f:
            schema_json_obj = json.load(f)
                
        # build the mapping file path
        mapping_file_path =  "mapping.json"
        
        # read mapping file
        with open(mapping_file_path, "r") as f:
            mapping_json_obj = json.load(f)
                
        # transform
        input_keys = input_json_obj.keys()
        target_keys = schema_json_obj.keys()
        
        for key in target_keys:
            if key != "optional":
                provider_mapping_dict = mapping_json_obj.get(schema_name, {}).get(provider_name, {})
                
                target_key = provider_mapping_dict.get(key, key)
                input_key = target_key
                
                for k, v in provider_mapping_dict.items():
                    if v == key:
                        input_key = k
                        break

                if input_key in input_keys:
                    json_obj[target_key] = input_json_obj[input_key]
                else:
                    if "optional" not in schema_json_obj:
                        raise Exception
                    else:
                        if input_key not in ["optional"]:
                            raise Exception
                
                for key in schema_json_obj["optional"]:
                    if key not in json_obj:
                        json_obj[key] = None
            
        return json_obj
    